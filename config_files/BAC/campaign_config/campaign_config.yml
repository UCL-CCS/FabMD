



polynomial_order: 1
n_replicas: 3

campaign_name: "BAC"

encoder_delimiter: "$"
app_name: "g15"

decoder_target_filename: "output.csv"

# keep decoder_output_columns as array, even if you have a single entry
decoder_output_columns: ["drug","binding_energy_avg"]





# sampler_name: str
#   Samplers in the context of EasyVVUQ are classes that generate
#   sequences of parameter dictionaries.
#   available sampler: [SCSampler,PCESampler,RandomSampler]
#
#   SCSampler: Stochastic Collocation sampler
#   PCESampler : Polynomial Chaos Expansion
#   RandomSampler : 
#   ---------------------------------------------------------------
#   TODO : add other available easyvvuq sampler to the code
#   LHCSampler : Latin hypercube sampling
#   BasicSweep :
#   MultiSampler : Expects one or more samplers
#   ReplicaSampler:
#   QMCSampler : Quasi Monte Carlo sampler
#   MCSampler: Monte Carlo sampler
sampler_name: "SCSampler"

# quadrature_rule : char
#     The quadrature method, default is Gaussian "G".
#     "G" -> Gaussian , "C" -> Clenshaw_Curtis
quadrature_rule: "C"

# sparse : bool
#             If True use sparse grid instead of normal tensor product grid,
#             default is False
sparse: True

# growth: bool
#     Sets the growth rule to exponential for Clenshaw Curtis quadrature,
#     which makes it nested, and therefore more efficient for sparse grids.
#     Default is False.
growth: True

# midpoint_level1: bool
#     determines how many points the 1st level of a sparse grid will have.
#     If midpoint_level1 = True, order 0 quadrature will be generated
midpoint_level1: True

# dimension_adaptive: bool
#     determines wether to use an insotropic sparse grid, or to adapt
#     the levels in the sparse grid based on a hierachical error measure
dimension_adaptive: True

# ------- NOTE ------------
# if you set SC_quadrature_rule="C", then you need to make sure
#     sparse=True
#     growth=True
#     midpoint_level1=True